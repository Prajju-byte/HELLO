Program 8: 

Title: "Java Program: Custom Exception Handling for DivisionByZero and Arithmetic Exceptions".

Problem Description: Develop a Java program that demonstrates the handling 
of custom exceptions,
 specifically for DivisionByZero and Arithmetic exceptions.
 You are required to utilize try-catch blocks along with throw statements to handle 
these exceptions gracefully.


import java.util.Scanner;

class DivisionByZeroException extends Exception {
 
public DivisionByZeroException(String message) { 
super(message); 
} 
} 

public class pgm8 {

static double divide(int numerator, int denominator) throws DivisionByZeroException { 
if (denominator == 0) { 
throw new DivisionByZeroException("Cannot divide by zero!"); 
} 
return (double) numerator / denominator; 
} 

public static void main(String[] args) {

Scanner input = new Scanner(System.in);
System.out.println("Enter numerator and denominator ");
int numerator = input.nextInt();
int denominator = input.nextInt();

try { 
double result = divide(numerator, denominator); 
System.out.println("Result of division: " + result); 
} catch (DivisionByZeroException e) { 
System.out.println("Exception caught: " + e.getMessage());
} 
finally { 
System.out.println("Finally block executed"); 
}
}
}


PROGRAM 9:

TITLE: Wwrite a java program to generate a random number using multiple threads 
PROBLEM DESCRIPTION :Develop a Java program that implements a multi-threaded application with three threads.
 Each thread has a specific task as described as follows:
 First Thread (Random Number Generator): This thread generates a random integer every 1 second.
 Second Thread (Square Computation): This thread receives the random integer generated by the first thread
 and computes its square. After computing the square, it prints the result. 
 Third Thread (Cube Computation): This thread receives the random integer generated by the first thread and
 computes its cube. After computing the cube, it prints the result


import java.util.*;
class Square implements Runnable {
public int x;
public Square(int num) {
x = num;
}
public void run() {
System.out.println("Thread 2: Square of " + x + " is: " + x * x);
}
}
class Cube implements Runnable {
public int x;
public Cube(int num) {
x = num;
}
public void run() {
System.out.println("Thread 3: Cube of " + x + " is: " + x * x * x);
}
}
class GenerateNos implements Runnable {
public void run() {
int num = 0;
Random r = new Random();
try {
for (int i = 0; i < 5; i++) {
num = r.nextInt(100);
System.out.println("Thread 1: Generated random number is " + num);
Thread t1 = new Thread(new Square(num));
t1.start();
Thread t2 = new Thread(new Cube(num));
t2.start();
Thread.sleep(1000);
System.out.println("--------------------------------------");
}
} catch (Exception ex) {
System.out.println(ex.getMessage());
}
}
} // End of GenerateNos
public class pgm9_2 {

public static void main(String[] args) {
Thread t = new Thread(new GenerateNos());
t.start();
}
}
